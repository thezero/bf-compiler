'''
Created on 3.2.2010

@author: The Zero
'''

'''
Converts image data to brainfuck code
'''
class Image2Bf():

    '''
    Converts rbg tuple into integer

    @param rgb: tuple of primary colors (r, g, b)
    @return: integer value of color
    '''
    def rgb2long(self, rgb):
        r, g, b = rgb
        return r * 65536 + g * 256 + b

    '''
    Converts image into brainfuck code

    @param image: Image data generated by pngreader
    @param map: mapping function from color value to brainfuck op
    @param pixmap: mapping function for color value (before reading map param)
    @return: brainfuck code
    '''
    def convert(self, image, map, pixmap = lambda x: x):
        result = []

        h = len(image)
        w = len(image[0])

        hDelta = 0
        wDelta = 1
        wPtr = 0
        hPtr = 0

        # right rotation direction offsets (x,y)
        rrmap = ((0, 1), (1, 0), (0, -1), (-1, 0))
        # left rotation direction offsets (x,y)
        lrmap = ((0, 1), (-1, 0), (0, -1), (1, 0))
        while wPtr >= 0 and wPtr < w and hPtr >= 0 and hPtr < h:
            ptr = pixmap(image[hPtr][wPtr])
            if (ptr in map):
                op = map[ptr]
                if ('R' == op):
                    # right rotation
                    hDelta, wDelta = rrmap[(rrmap.index((hDelta, wDelta)) + 1) % 4]
                elif ('L' == op):
                    # left rotations
                    hDelta, wDelta = lrmap[(lrmap.index((hDelta, wDelta)) + 1) % 4]
                else:
                    result.append(op)
            hPtr += hDelta
            wPtr += wDelta

        return ''.join(result)

    '''
    Converts brainloller image into brainfuck code

    @param image: image data from pngreader
    @return string
    '''
    def loller(self, image):
        map = {
            (255, 0, 0): '>',
            (128, 0, 0): '<',
            (0, 255, 0): '+',
            (0, 128, 0): '-',
            (0, 0, 255): '.',
            (0, 0, 128): ',',
            (255, 255, 0): '[',
            (128, 128, 0): ']',
            (0, 255, 255): 'R',
            (0, 128, 128): 'L'
        }
        return self.convert(image, map)

    '''
    Converts braincopter image into brainfuck code

    @param image: image data from pngreader
    @return string
    '''
    def copter(self, image):
        map = {
            0: '>',
            1: '<',
            2: '+',
            3: '-',
            4: '.',
            5: ',',
            6: '[',
            7: ']',
            8: 'R',
            9: 'L'
        }
        return self.convert(image, map, lambda x: (x[0] * -2 + x[1] * 3 + x[2]) % 11)
